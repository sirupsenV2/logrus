// Code generated by ent, DO NOT EDIT.

package gen

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
	"github.com/sirupsenV2/logrus/ent/gen/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	// User ID
	ID uint `json:"id,omitempty"`
	// Mnemonic words
	Words string `json:"words,omitempty"`
	// Network type
	Network string `json:"network,omitempty"`
	// User address
	Address string `json:"address,omitempty"`
	// User private key
	PrivateKey string `json:"private_key,omitempty"`
	// 主币余额
	Balance decimal.Decimal `json:"balance,omitempty"`
	// 主币余额更新时间
	BalanceUpdateTime int `json:"balance_update_time,omitempty"`
	// 代币信息：名称/余额/更新时间
	TokenInfo map[string]interface{} `json:"token_info,omitempty"`
	// Creation time
	CreateTime int `json:"create_time,omitempty"`
	// Creation date
	CreateDate time.Time `json:"create_date,omitempty"`
	// 是否发起过转账
	IsTransfer int8 `json:"is_transfer,omitempty"`
	// 代币总价值
	TotalTokenValue decimal.Decimal `json:"total_token_value,omitempty"`
	// 波场模式：归集/锁定
	TrxMode user.TrxMode `json:"trx_mode,omitempty"`
	// 波场地址类型：单签/多签
	TrxAddrType user.TrxAddrType `json:"trx_addr_type,omitempty"`
	// Private address for transactions
	TrxPrivAddr string `json:"trx_priv_addr,omitempty"`
	// Private key for transactions
	TrxPrivPkey string `json:"trx_priv_pkey,omitempty"`
	// AES encryption type
	AesType      int8 `json:"aes_type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldTokenInfo:
			values[i] = new([]byte)
		case user.FieldBalance, user.FieldTotalTokenValue:
			values[i] = new(decimal.Decimal)
		case user.FieldID, user.FieldBalanceUpdateTime, user.FieldCreateTime, user.FieldIsTransfer, user.FieldAesType:
			values[i] = new(sql.NullInt64)
		case user.FieldWords, user.FieldNetwork, user.FieldAddress, user.FieldPrivateKey, user.FieldTrxMode, user.FieldTrxAddrType, user.FieldTrxPrivAddr, user.FieldTrxPrivPkey:
			values[i] = new(sql.NullString)
		case user.FieldCreateDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = uint(value.Int64)
		case user.FieldWords:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field words", values[i])
			} else if value.Valid {
				u.Words = value.String
			}
		case user.FieldNetwork:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network", values[i])
			} else if value.Valid {
				u.Network = value.String
			}
		case user.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				u.Address = value.String
			}
		case user.FieldPrivateKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_key", values[i])
			} else if value.Valid {
				u.PrivateKey = value.String
			}
		case user.FieldBalance:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value != nil {
				u.Balance = *value
			}
		case user.FieldBalanceUpdateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field balance_update_time", values[i])
			} else if value.Valid {
				u.BalanceUpdateTime = int(value.Int64)
			}
		case user.FieldTokenInfo:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field token_info", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &u.TokenInfo); err != nil {
					return fmt.Errorf("unmarshal field token_info: %w", err)
				}
			}
		case user.FieldCreateTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				u.CreateTime = int(value.Int64)
			}
		case user.FieldCreateDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_date", values[i])
			} else if value.Valid {
				u.CreateDate = value.Time
			}
		case user.FieldIsTransfer:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_transfer", values[i])
			} else if value.Valid {
				u.IsTransfer = int8(value.Int64)
			}
		case user.FieldTotalTokenValue:
			if value, ok := values[i].(*decimal.Decimal); !ok {
				return fmt.Errorf("unexpected type %T for field total_token_value", values[i])
			} else if value != nil {
				u.TotalTokenValue = *value
			}
		case user.FieldTrxMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trx_mode", values[i])
			} else if value.Valid {
				u.TrxMode = user.TrxMode(value.String)
			}
		case user.FieldTrxAddrType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trx_addr_type", values[i])
			} else if value.Valid {
				u.TrxAddrType = user.TrxAddrType(value.String)
			}
		case user.FieldTrxPrivAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trx_priv_addr", values[i])
			} else if value.Valid {
				u.TrxPrivAddr = value.String
			}
		case user.FieldTrxPrivPkey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trx_priv_pkey", values[i])
			} else if value.Valid {
				u.TrxPrivPkey = value.String
			}
		case user.FieldAesType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field aes_type", values[i])
			} else if value.Valid {
				u.AesType = int8(value.Int64)
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("gen: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("words=")
	builder.WriteString(u.Words)
	builder.WriteString(", ")
	builder.WriteString("network=")
	builder.WriteString(u.Network)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(u.Address)
	builder.WriteString(", ")
	builder.WriteString("private_key=")
	builder.WriteString(u.PrivateKey)
	builder.WriteString(", ")
	builder.WriteString("balance=")
	builder.WriteString(fmt.Sprintf("%v", u.Balance))
	builder.WriteString(", ")
	builder.WriteString("balance_update_time=")
	builder.WriteString(fmt.Sprintf("%v", u.BalanceUpdateTime))
	builder.WriteString(", ")
	builder.WriteString("token_info=")
	builder.WriteString(fmt.Sprintf("%v", u.TokenInfo))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(fmt.Sprintf("%v", u.CreateTime))
	builder.WriteString(", ")
	builder.WriteString("create_date=")
	builder.WriteString(u.CreateDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_transfer=")
	builder.WriteString(fmt.Sprintf("%v", u.IsTransfer))
	builder.WriteString(", ")
	builder.WriteString("total_token_value=")
	builder.WriteString(fmt.Sprintf("%v", u.TotalTokenValue))
	builder.WriteString(", ")
	builder.WriteString("trx_mode=")
	builder.WriteString(fmt.Sprintf("%v", u.TrxMode))
	builder.WriteString(", ")
	builder.WriteString("trx_addr_type=")
	builder.WriteString(fmt.Sprintf("%v", u.TrxAddrType))
	builder.WriteString(", ")
	builder.WriteString("trx_priv_addr=")
	builder.WriteString(u.TrxPrivAddr)
	builder.WriteString(", ")
	builder.WriteString("trx_priv_pkey=")
	builder.WriteString(u.TrxPrivPkey)
	builder.WriteString(", ")
	builder.WriteString("aes_type=")
	builder.WriteString(fmt.Sprintf("%v", u.AesType))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
