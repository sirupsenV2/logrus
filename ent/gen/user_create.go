// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"core-chain/ent/gen/user"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shopspring/decimal"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetWords sets the "words" field.
func (uc *UserCreate) SetWords(s string) *UserCreate {
	uc.mutation.SetWords(s)
	return uc
}

// SetNillableWords sets the "words" field if the given value is not nil.
func (uc *UserCreate) SetNillableWords(s *string) *UserCreate {
	if s != nil {
		uc.SetWords(*s)
	}
	return uc
}

// SetNetwork sets the "network" field.
func (uc *UserCreate) SetNetwork(s string) *UserCreate {
	uc.mutation.SetNetwork(s)
	return uc
}

// SetNillableNetwork sets the "network" field if the given value is not nil.
func (uc *UserCreate) SetNillableNetwork(s *string) *UserCreate {
	if s != nil {
		uc.SetNetwork(*s)
	}
	return uc
}

// SetAddress sets the "address" field.
func (uc *UserCreate) SetAddress(s string) *UserCreate {
	uc.mutation.SetAddress(s)
	return uc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (uc *UserCreate) SetNillableAddress(s *string) *UserCreate {
	if s != nil {
		uc.SetAddress(*s)
	}
	return uc
}

// SetPrivateKey sets the "private_key" field.
func (uc *UserCreate) SetPrivateKey(s string) *UserCreate {
	uc.mutation.SetPrivateKey(s)
	return uc
}

// SetNillablePrivateKey sets the "private_key" field if the given value is not nil.
func (uc *UserCreate) SetNillablePrivateKey(s *string) *UserCreate {
	if s != nil {
		uc.SetPrivateKey(*s)
	}
	return uc
}

// SetBalance sets the "balance" field.
func (uc *UserCreate) SetBalance(d decimal.Decimal) *UserCreate {
	uc.mutation.SetBalance(d)
	return uc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (uc *UserCreate) SetNillableBalance(d *decimal.Decimal) *UserCreate {
	if d != nil {
		uc.SetBalance(*d)
	}
	return uc
}

// SetBalanceUpdateTime sets the "balance_update_time" field.
func (uc *UserCreate) SetBalanceUpdateTime(i int) *UserCreate {
	uc.mutation.SetBalanceUpdateTime(i)
	return uc
}

// SetNillableBalanceUpdateTime sets the "balance_update_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableBalanceUpdateTime(i *int) *UserCreate {
	if i != nil {
		uc.SetBalanceUpdateTime(*i)
	}
	return uc
}

// SetTokenInfo sets the "token_info" field.
func (uc *UserCreate) SetTokenInfo(m map[string]interface{}) *UserCreate {
	uc.mutation.SetTokenInfo(m)
	return uc
}

// SetCreateTime sets the "create_time" field.
func (uc *UserCreate) SetCreateTime(i int) *UserCreate {
	uc.mutation.SetCreateTime(i)
	return uc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateTime(i *int) *UserCreate {
	if i != nil {
		uc.SetCreateTime(*i)
	}
	return uc
}

// SetCreateDate sets the "create_date" field.
func (uc *UserCreate) SetCreateDate(t time.Time) *UserCreate {
	uc.mutation.SetCreateDate(t)
	return uc
}

// SetNillableCreateDate sets the "create_date" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreateDate(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreateDate(*t)
	}
	return uc
}

// SetIsTransfer sets the "is_transfer" field.
func (uc *UserCreate) SetIsTransfer(i int8) *UserCreate {
	uc.mutation.SetIsTransfer(i)
	return uc
}

// SetNillableIsTransfer sets the "is_transfer" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsTransfer(i *int8) *UserCreate {
	if i != nil {
		uc.SetIsTransfer(*i)
	}
	return uc
}

// SetTotalTokenValue sets the "total_token_value" field.
func (uc *UserCreate) SetTotalTokenValue(d decimal.Decimal) *UserCreate {
	uc.mutation.SetTotalTokenValue(d)
	return uc
}

// SetNillableTotalTokenValue sets the "total_token_value" field if the given value is not nil.
func (uc *UserCreate) SetNillableTotalTokenValue(d *decimal.Decimal) *UserCreate {
	if d != nil {
		uc.SetTotalTokenValue(*d)
	}
	return uc
}

// SetTrxMode sets the "trx_mode" field.
func (uc *UserCreate) SetTrxMode(um user.TrxMode) *UserCreate {
	uc.mutation.SetTrxMode(um)
	return uc
}

// SetNillableTrxMode sets the "trx_mode" field if the given value is not nil.
func (uc *UserCreate) SetNillableTrxMode(um *user.TrxMode) *UserCreate {
	if um != nil {
		uc.SetTrxMode(*um)
	}
	return uc
}

// SetTrxAddrType sets the "trx_addr_type" field.
func (uc *UserCreate) SetTrxAddrType(uat user.TrxAddrType) *UserCreate {
	uc.mutation.SetTrxAddrType(uat)
	return uc
}

// SetNillableTrxAddrType sets the "trx_addr_type" field if the given value is not nil.
func (uc *UserCreate) SetNillableTrxAddrType(uat *user.TrxAddrType) *UserCreate {
	if uat != nil {
		uc.SetTrxAddrType(*uat)
	}
	return uc
}

// SetTrxPrivAddr sets the "trx_priv_addr" field.
func (uc *UserCreate) SetTrxPrivAddr(s string) *UserCreate {
	uc.mutation.SetTrxPrivAddr(s)
	return uc
}

// SetNillableTrxPrivAddr sets the "trx_priv_addr" field if the given value is not nil.
func (uc *UserCreate) SetNillableTrxPrivAddr(s *string) *UserCreate {
	if s != nil {
		uc.SetTrxPrivAddr(*s)
	}
	return uc
}

// SetTrxPrivPkey sets the "trx_priv_pkey" field.
func (uc *UserCreate) SetTrxPrivPkey(s string) *UserCreate {
	uc.mutation.SetTrxPrivPkey(s)
	return uc
}

// SetNillableTrxPrivPkey sets the "trx_priv_pkey" field if the given value is not nil.
func (uc *UserCreate) SetNillableTrxPrivPkey(s *string) *UserCreate {
	if s != nil {
		uc.SetTrxPrivPkey(*s)
	}
	return uc
}

// SetAesType sets the "aes_type" field.
func (uc *UserCreate) SetAesType(i int8) *UserCreate {
	uc.mutation.SetAesType(i)
	return uc
}

// SetNillableAesType sets the "aes_type" field if the given value is not nil.
func (uc *UserCreate) SetNillableAesType(i *int8) *UserCreate {
	if i != nil {
		uc.SetAesType(*i)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UserCreate) SetID(u uint) *UserCreate {
	uc.mutation.SetID(u)
	return uc
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.Words(); !ok {
		v := user.DefaultWords
		uc.mutation.SetWords(v)
	}
	if _, ok := uc.mutation.Network(); !ok {
		v := user.DefaultNetwork
		uc.mutation.SetNetwork(v)
	}
	if _, ok := uc.mutation.Address(); !ok {
		v := user.DefaultAddress
		uc.mutation.SetAddress(v)
	}
	if _, ok := uc.mutation.PrivateKey(); !ok {
		v := user.DefaultPrivateKey
		uc.mutation.SetPrivateKey(v)
	}
	if _, ok := uc.mutation.Balance(); !ok {
		v := user.DefaultBalance
		uc.mutation.SetBalance(v)
	}
	if _, ok := uc.mutation.BalanceUpdateTime(); !ok {
		v := user.DefaultBalanceUpdateTime
		uc.mutation.SetBalanceUpdateTime(v)
	}
	if _, ok := uc.mutation.CreateTime(); !ok {
		v := user.DefaultCreateTime
		uc.mutation.SetCreateTime(v)
	}
	if _, ok := uc.mutation.IsTransfer(); !ok {
		v := user.DefaultIsTransfer
		uc.mutation.SetIsTransfer(v)
	}
	if _, ok := uc.mutation.TotalTokenValue(); !ok {
		v := user.DefaultTotalTokenValue
		uc.mutation.SetTotalTokenValue(v)
	}
	if _, ok := uc.mutation.TrxMode(); !ok {
		v := user.DefaultTrxMode
		uc.mutation.SetTrxMode(v)
	}
	if _, ok := uc.mutation.TrxAddrType(); !ok {
		v := user.DefaultTrxAddrType
		uc.mutation.SetTrxAddrType(v)
	}
	if _, ok := uc.mutation.TrxPrivAddr(); !ok {
		v := user.DefaultTrxPrivAddr
		uc.mutation.SetTrxPrivAddr(v)
	}
	if _, ok := uc.mutation.TrxPrivPkey(); !ok {
		v := user.DefaultTrxPrivPkey
		uc.mutation.SetTrxPrivPkey(v)
	}
	if _, ok := uc.mutation.AesType(); !ok {
		v := user.DefaultAesType
		uc.mutation.SetAesType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`gen: missing required field "User.balance"`)}
	}
	if _, ok := uc.mutation.TotalTokenValue(); !ok {
		return &ValidationError{Name: "total_token_value", err: errors.New(`gen: missing required field "User.total_token_value"`)}
	}
	if v, ok := uc.mutation.TrxMode(); ok {
		if err := user.TrxModeValidator(v); err != nil {
			return &ValidationError{Name: "trx_mode", err: fmt.Errorf(`gen: validator failed for field "User.trx_mode": %w`, err)}
		}
	}
	if v, ok := uc.mutation.TrxAddrType(); ok {
		if err := user.TrxAddrTypeValidator(v); err != nil {
			return &ValidationError{Name: "trx_addr_type", err: fmt.Errorf(`gen: validator failed for field "User.trx_addr_type": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint(id)
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUint))
	)
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := uc.mutation.Words(); ok {
		_spec.SetField(user.FieldWords, field.TypeString, value)
		_node.Words = value
	}
	if value, ok := uc.mutation.Network(); ok {
		_spec.SetField(user.FieldNetwork, field.TypeString, value)
		_node.Network = value
	}
	if value, ok := uc.mutation.Address(); ok {
		_spec.SetField(user.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := uc.mutation.PrivateKey(); ok {
		_spec.SetField(user.FieldPrivateKey, field.TypeString, value)
		_node.PrivateKey = value
	}
	if value, ok := uc.mutation.Balance(); ok {
		_spec.SetField(user.FieldBalance, field.TypeOther, value)
		_node.Balance = value
	}
	if value, ok := uc.mutation.BalanceUpdateTime(); ok {
		_spec.SetField(user.FieldBalanceUpdateTime, field.TypeInt, value)
		_node.BalanceUpdateTime = value
	}
	if value, ok := uc.mutation.TokenInfo(); ok {
		_spec.SetField(user.FieldTokenInfo, field.TypeJSON, value)
		_node.TokenInfo = value
	}
	if value, ok := uc.mutation.CreateTime(); ok {
		_spec.SetField(user.FieldCreateTime, field.TypeInt, value)
		_node.CreateTime = value
	}
	if value, ok := uc.mutation.CreateDate(); ok {
		_spec.SetField(user.FieldCreateDate, field.TypeTime, value)
		_node.CreateDate = value
	}
	if value, ok := uc.mutation.IsTransfer(); ok {
		_spec.SetField(user.FieldIsTransfer, field.TypeInt8, value)
		_node.IsTransfer = value
	}
	if value, ok := uc.mutation.TotalTokenValue(); ok {
		_spec.SetField(user.FieldTotalTokenValue, field.TypeOther, value)
		_node.TotalTokenValue = value
	}
	if value, ok := uc.mutation.TrxMode(); ok {
		_spec.SetField(user.FieldTrxMode, field.TypeEnum, value)
		_node.TrxMode = value
	}
	if value, ok := uc.mutation.TrxAddrType(); ok {
		_spec.SetField(user.FieldTrxAddrType, field.TypeEnum, value)
		_node.TrxAddrType = value
	}
	if value, ok := uc.mutation.TrxPrivAddr(); ok {
		_spec.SetField(user.FieldTrxPrivAddr, field.TypeString, value)
		_node.TrxPrivAddr = value
	}
	if value, ok := uc.mutation.TrxPrivPkey(); ok {
		_spec.SetField(user.FieldTrxPrivPkey, field.TypeString, value)
		_node.TrxPrivPkey = value
	}
	if value, ok := uc.mutation.AesType(); ok {
		_spec.SetField(user.FieldAesType, field.TypeInt8, value)
		_node.AesType = value
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
