// Code generated by ent, DO NOT EDIT.

package user

import (
	"core-chain/ent/gen/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

// ID filters vertices based on their ID field.
func ID(id uint) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Words applies equality check predicate on the "words" field. It's identical to WordsEQ.
func Words(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWords, v))
}

// Network applies equality check predicate on the "network" field. It's identical to NetworkEQ.
func Network(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNetwork, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddress, v))
}

// PrivateKey applies equality check predicate on the "private_key" field. It's identical to PrivateKeyEQ.
func PrivateKey(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPrivateKey, v))
}

// Balance applies equality check predicate on the "balance" field. It's identical to BalanceEQ.
func Balance(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBalance, v))
}

// BalanceUpdateTime applies equality check predicate on the "balance_update_time" field. It's identical to BalanceUpdateTimeEQ.
func BalanceUpdateTime(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBalanceUpdateTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateDate applies equality check predicate on the "create_date" field. It's identical to CreateDateEQ.
func CreateDate(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateDate, v))
}

// IsTransfer applies equality check predicate on the "is_transfer" field. It's identical to IsTransferEQ.
func IsTransfer(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsTransfer, v))
}

// TotalTokenValue applies equality check predicate on the "total_token_value" field. It's identical to TotalTokenValueEQ.
func TotalTokenValue(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotalTokenValue, v))
}

// TrxPrivAddr applies equality check predicate on the "trx_priv_addr" field. It's identical to TrxPrivAddrEQ.
func TrxPrivAddr(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTrxPrivAddr, v))
}

// TrxPrivPkey applies equality check predicate on the "trx_priv_pkey" field. It's identical to TrxPrivPkeyEQ.
func TrxPrivPkey(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTrxPrivPkey, v))
}

// AesType applies equality check predicate on the "aes_type" field. It's identical to AesTypeEQ.
func AesType(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAesType, v))
}

// WordsEQ applies the EQ predicate on the "words" field.
func WordsEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWords, v))
}

// WordsNEQ applies the NEQ predicate on the "words" field.
func WordsNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWords, v))
}

// WordsIn applies the In predicate on the "words" field.
func WordsIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldWords, vs...))
}

// WordsNotIn applies the NotIn predicate on the "words" field.
func WordsNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWords, vs...))
}

// WordsGT applies the GT predicate on the "words" field.
func WordsGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldWords, v))
}

// WordsGTE applies the GTE predicate on the "words" field.
func WordsGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWords, v))
}

// WordsLT applies the LT predicate on the "words" field.
func WordsLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldWords, v))
}

// WordsLTE applies the LTE predicate on the "words" field.
func WordsLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWords, v))
}

// WordsContains applies the Contains predicate on the "words" field.
func WordsContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldWords, v))
}

// WordsHasPrefix applies the HasPrefix predicate on the "words" field.
func WordsHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldWords, v))
}

// WordsHasSuffix applies the HasSuffix predicate on the "words" field.
func WordsHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldWords, v))
}

// WordsIsNil applies the IsNil predicate on the "words" field.
func WordsIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldWords))
}

// WordsNotNil applies the NotNil predicate on the "words" field.
func WordsNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldWords))
}

// WordsEqualFold applies the EqualFold predicate on the "words" field.
func WordsEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldWords, v))
}

// WordsContainsFold applies the ContainsFold predicate on the "words" field.
func WordsContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldWords, v))
}

// NetworkEQ applies the EQ predicate on the "network" field.
func NetworkEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNetwork, v))
}

// NetworkNEQ applies the NEQ predicate on the "network" field.
func NetworkNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNetwork, v))
}

// NetworkIn applies the In predicate on the "network" field.
func NetworkIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNetwork, vs...))
}

// NetworkNotIn applies the NotIn predicate on the "network" field.
func NetworkNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNetwork, vs...))
}

// NetworkGT applies the GT predicate on the "network" field.
func NetworkGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNetwork, v))
}

// NetworkGTE applies the GTE predicate on the "network" field.
func NetworkGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNetwork, v))
}

// NetworkLT applies the LT predicate on the "network" field.
func NetworkLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNetwork, v))
}

// NetworkLTE applies the LTE predicate on the "network" field.
func NetworkLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNetwork, v))
}

// NetworkContains applies the Contains predicate on the "network" field.
func NetworkContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNetwork, v))
}

// NetworkHasPrefix applies the HasPrefix predicate on the "network" field.
func NetworkHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNetwork, v))
}

// NetworkHasSuffix applies the HasSuffix predicate on the "network" field.
func NetworkHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNetwork, v))
}

// NetworkIsNil applies the IsNil predicate on the "network" field.
func NetworkIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNetwork))
}

// NetworkNotNil applies the NotNil predicate on the "network" field.
func NetworkNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNetwork))
}

// NetworkEqualFold applies the EqualFold predicate on the "network" field.
func NetworkEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNetwork, v))
}

// NetworkContainsFold applies the ContainsFold predicate on the "network" field.
func NetworkContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNetwork, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressIsNil applies the IsNil predicate on the "address" field.
func AddressIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAddress))
}

// AddressNotNil applies the NotNil predicate on the "address" field.
func AddressNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAddress))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAddress, v))
}

// PrivateKeyEQ applies the EQ predicate on the "private_key" field.
func PrivateKeyEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPrivateKey, v))
}

// PrivateKeyNEQ applies the NEQ predicate on the "private_key" field.
func PrivateKeyNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPrivateKey, v))
}

// PrivateKeyIn applies the In predicate on the "private_key" field.
func PrivateKeyIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPrivateKey, vs...))
}

// PrivateKeyNotIn applies the NotIn predicate on the "private_key" field.
func PrivateKeyNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPrivateKey, vs...))
}

// PrivateKeyGT applies the GT predicate on the "private_key" field.
func PrivateKeyGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPrivateKey, v))
}

// PrivateKeyGTE applies the GTE predicate on the "private_key" field.
func PrivateKeyGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPrivateKey, v))
}

// PrivateKeyLT applies the LT predicate on the "private_key" field.
func PrivateKeyLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPrivateKey, v))
}

// PrivateKeyLTE applies the LTE predicate on the "private_key" field.
func PrivateKeyLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPrivateKey, v))
}

// PrivateKeyContains applies the Contains predicate on the "private_key" field.
func PrivateKeyContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPrivateKey, v))
}

// PrivateKeyHasPrefix applies the HasPrefix predicate on the "private_key" field.
func PrivateKeyHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPrivateKey, v))
}

// PrivateKeyHasSuffix applies the HasSuffix predicate on the "private_key" field.
func PrivateKeyHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPrivateKey, v))
}

// PrivateKeyIsNil applies the IsNil predicate on the "private_key" field.
func PrivateKeyIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPrivateKey))
}

// PrivateKeyNotNil applies the NotNil predicate on the "private_key" field.
func PrivateKeyNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPrivateKey))
}

// PrivateKeyEqualFold applies the EqualFold predicate on the "private_key" field.
func PrivateKeyEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPrivateKey, v))
}

// PrivateKeyContainsFold applies the ContainsFold predicate on the "private_key" field.
func PrivateKeyContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPrivateKey, v))
}

// BalanceEQ applies the EQ predicate on the "balance" field.
func BalanceEQ(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBalance, v))
}

// BalanceNEQ applies the NEQ predicate on the "balance" field.
func BalanceNEQ(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBalance, v))
}

// BalanceIn applies the In predicate on the "balance" field.
func BalanceIn(vs ...decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldIn(FieldBalance, vs...))
}

// BalanceNotIn applies the NotIn predicate on the "balance" field.
func BalanceNotIn(vs ...decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBalance, vs...))
}

// BalanceGT applies the GT predicate on the "balance" field.
func BalanceGT(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldGT(FieldBalance, v))
}

// BalanceGTE applies the GTE predicate on the "balance" field.
func BalanceGTE(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBalance, v))
}

// BalanceLT applies the LT predicate on the "balance" field.
func BalanceLT(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldLT(FieldBalance, v))
}

// BalanceLTE applies the LTE predicate on the "balance" field.
func BalanceLTE(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBalance, v))
}

// BalanceUpdateTimeEQ applies the EQ predicate on the "balance_update_time" field.
func BalanceUpdateTimeEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldBalanceUpdateTime, v))
}

// BalanceUpdateTimeNEQ applies the NEQ predicate on the "balance_update_time" field.
func BalanceUpdateTimeNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldBalanceUpdateTime, v))
}

// BalanceUpdateTimeIn applies the In predicate on the "balance_update_time" field.
func BalanceUpdateTimeIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldBalanceUpdateTime, vs...))
}

// BalanceUpdateTimeNotIn applies the NotIn predicate on the "balance_update_time" field.
func BalanceUpdateTimeNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldBalanceUpdateTime, vs...))
}

// BalanceUpdateTimeGT applies the GT predicate on the "balance_update_time" field.
func BalanceUpdateTimeGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldBalanceUpdateTime, v))
}

// BalanceUpdateTimeGTE applies the GTE predicate on the "balance_update_time" field.
func BalanceUpdateTimeGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldBalanceUpdateTime, v))
}

// BalanceUpdateTimeLT applies the LT predicate on the "balance_update_time" field.
func BalanceUpdateTimeLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldBalanceUpdateTime, v))
}

// BalanceUpdateTimeLTE applies the LTE predicate on the "balance_update_time" field.
func BalanceUpdateTimeLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldBalanceUpdateTime, v))
}

// BalanceUpdateTimeIsNil applies the IsNil predicate on the "balance_update_time" field.
func BalanceUpdateTimeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldBalanceUpdateTime))
}

// BalanceUpdateTimeNotNil applies the NotNil predicate on the "balance_update_time" field.
func BalanceUpdateTimeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldBalanceUpdateTime))
}

// TokenInfoIsNil applies the IsNil predicate on the "token_info" field.
func TokenInfoIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTokenInfo))
}

// TokenInfoNotNil applies the NotNil predicate on the "token_info" field.
func TokenInfoNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTokenInfo))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v int) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v int) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreateTime))
}

// CreateDateEQ applies the EQ predicate on the "create_date" field.
func CreateDateEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreateDate, v))
}

// CreateDateNEQ applies the NEQ predicate on the "create_date" field.
func CreateDateNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreateDate, v))
}

// CreateDateIn applies the In predicate on the "create_date" field.
func CreateDateIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreateDate, vs...))
}

// CreateDateNotIn applies the NotIn predicate on the "create_date" field.
func CreateDateNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreateDate, vs...))
}

// CreateDateGT applies the GT predicate on the "create_date" field.
func CreateDateGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreateDate, v))
}

// CreateDateGTE applies the GTE predicate on the "create_date" field.
func CreateDateGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreateDate, v))
}

// CreateDateLT applies the LT predicate on the "create_date" field.
func CreateDateLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreateDate, v))
}

// CreateDateLTE applies the LTE predicate on the "create_date" field.
func CreateDateLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreateDate, v))
}

// CreateDateIsNil applies the IsNil predicate on the "create_date" field.
func CreateDateIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldCreateDate))
}

// CreateDateNotNil applies the NotNil predicate on the "create_date" field.
func CreateDateNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldCreateDate))
}

// IsTransferEQ applies the EQ predicate on the "is_transfer" field.
func IsTransferEQ(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsTransfer, v))
}

// IsTransferNEQ applies the NEQ predicate on the "is_transfer" field.
func IsTransferNEQ(v int8) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsTransfer, v))
}

// IsTransferIn applies the In predicate on the "is_transfer" field.
func IsTransferIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldIn(FieldIsTransfer, vs...))
}

// IsTransferNotIn applies the NotIn predicate on the "is_transfer" field.
func IsTransferNotIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldIsTransfer, vs...))
}

// IsTransferGT applies the GT predicate on the "is_transfer" field.
func IsTransferGT(v int8) predicate.User {
	return predicate.User(sql.FieldGT(FieldIsTransfer, v))
}

// IsTransferGTE applies the GTE predicate on the "is_transfer" field.
func IsTransferGTE(v int8) predicate.User {
	return predicate.User(sql.FieldGTE(FieldIsTransfer, v))
}

// IsTransferLT applies the LT predicate on the "is_transfer" field.
func IsTransferLT(v int8) predicate.User {
	return predicate.User(sql.FieldLT(FieldIsTransfer, v))
}

// IsTransferLTE applies the LTE predicate on the "is_transfer" field.
func IsTransferLTE(v int8) predicate.User {
	return predicate.User(sql.FieldLTE(FieldIsTransfer, v))
}

// IsTransferIsNil applies the IsNil predicate on the "is_transfer" field.
func IsTransferIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldIsTransfer))
}

// IsTransferNotNil applies the NotNil predicate on the "is_transfer" field.
func IsTransferNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldIsTransfer))
}

// TotalTokenValueEQ applies the EQ predicate on the "total_token_value" field.
func TotalTokenValueEQ(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTotalTokenValue, v))
}

// TotalTokenValueNEQ applies the NEQ predicate on the "total_token_value" field.
func TotalTokenValueNEQ(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTotalTokenValue, v))
}

// TotalTokenValueIn applies the In predicate on the "total_token_value" field.
func TotalTokenValueIn(vs ...decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldIn(FieldTotalTokenValue, vs...))
}

// TotalTokenValueNotIn applies the NotIn predicate on the "total_token_value" field.
func TotalTokenValueNotIn(vs ...decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTotalTokenValue, vs...))
}

// TotalTokenValueGT applies the GT predicate on the "total_token_value" field.
func TotalTokenValueGT(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldGT(FieldTotalTokenValue, v))
}

// TotalTokenValueGTE applies the GTE predicate on the "total_token_value" field.
func TotalTokenValueGTE(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTotalTokenValue, v))
}

// TotalTokenValueLT applies the LT predicate on the "total_token_value" field.
func TotalTokenValueLT(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldLT(FieldTotalTokenValue, v))
}

// TotalTokenValueLTE applies the LTE predicate on the "total_token_value" field.
func TotalTokenValueLTE(v decimal.Decimal) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTotalTokenValue, v))
}

// TrxModeEQ applies the EQ predicate on the "trx_mode" field.
func TrxModeEQ(v TrxMode) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTrxMode, v))
}

// TrxModeNEQ applies the NEQ predicate on the "trx_mode" field.
func TrxModeNEQ(v TrxMode) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTrxMode, v))
}

// TrxModeIn applies the In predicate on the "trx_mode" field.
func TrxModeIn(vs ...TrxMode) predicate.User {
	return predicate.User(sql.FieldIn(FieldTrxMode, vs...))
}

// TrxModeNotIn applies the NotIn predicate on the "trx_mode" field.
func TrxModeNotIn(vs ...TrxMode) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTrxMode, vs...))
}

// TrxModeIsNil applies the IsNil predicate on the "trx_mode" field.
func TrxModeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTrxMode))
}

// TrxModeNotNil applies the NotNil predicate on the "trx_mode" field.
func TrxModeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTrxMode))
}

// TrxAddrTypeEQ applies the EQ predicate on the "trx_addr_type" field.
func TrxAddrTypeEQ(v TrxAddrType) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTrxAddrType, v))
}

// TrxAddrTypeNEQ applies the NEQ predicate on the "trx_addr_type" field.
func TrxAddrTypeNEQ(v TrxAddrType) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTrxAddrType, v))
}

// TrxAddrTypeIn applies the In predicate on the "trx_addr_type" field.
func TrxAddrTypeIn(vs ...TrxAddrType) predicate.User {
	return predicate.User(sql.FieldIn(FieldTrxAddrType, vs...))
}

// TrxAddrTypeNotIn applies the NotIn predicate on the "trx_addr_type" field.
func TrxAddrTypeNotIn(vs ...TrxAddrType) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTrxAddrType, vs...))
}

// TrxAddrTypeIsNil applies the IsNil predicate on the "trx_addr_type" field.
func TrxAddrTypeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTrxAddrType))
}

// TrxAddrTypeNotNil applies the NotNil predicate on the "trx_addr_type" field.
func TrxAddrTypeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTrxAddrType))
}

// TrxPrivAddrEQ applies the EQ predicate on the "trx_priv_addr" field.
func TrxPrivAddrEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTrxPrivAddr, v))
}

// TrxPrivAddrNEQ applies the NEQ predicate on the "trx_priv_addr" field.
func TrxPrivAddrNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTrxPrivAddr, v))
}

// TrxPrivAddrIn applies the In predicate on the "trx_priv_addr" field.
func TrxPrivAddrIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTrxPrivAddr, vs...))
}

// TrxPrivAddrNotIn applies the NotIn predicate on the "trx_priv_addr" field.
func TrxPrivAddrNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTrxPrivAddr, vs...))
}

// TrxPrivAddrGT applies the GT predicate on the "trx_priv_addr" field.
func TrxPrivAddrGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTrxPrivAddr, v))
}

// TrxPrivAddrGTE applies the GTE predicate on the "trx_priv_addr" field.
func TrxPrivAddrGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTrxPrivAddr, v))
}

// TrxPrivAddrLT applies the LT predicate on the "trx_priv_addr" field.
func TrxPrivAddrLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTrxPrivAddr, v))
}

// TrxPrivAddrLTE applies the LTE predicate on the "trx_priv_addr" field.
func TrxPrivAddrLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTrxPrivAddr, v))
}

// TrxPrivAddrContains applies the Contains predicate on the "trx_priv_addr" field.
func TrxPrivAddrContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTrxPrivAddr, v))
}

// TrxPrivAddrHasPrefix applies the HasPrefix predicate on the "trx_priv_addr" field.
func TrxPrivAddrHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTrxPrivAddr, v))
}

// TrxPrivAddrHasSuffix applies the HasSuffix predicate on the "trx_priv_addr" field.
func TrxPrivAddrHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTrxPrivAddr, v))
}

// TrxPrivAddrIsNil applies the IsNil predicate on the "trx_priv_addr" field.
func TrxPrivAddrIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTrxPrivAddr))
}

// TrxPrivAddrNotNil applies the NotNil predicate on the "trx_priv_addr" field.
func TrxPrivAddrNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTrxPrivAddr))
}

// TrxPrivAddrEqualFold applies the EqualFold predicate on the "trx_priv_addr" field.
func TrxPrivAddrEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTrxPrivAddr, v))
}

// TrxPrivAddrContainsFold applies the ContainsFold predicate on the "trx_priv_addr" field.
func TrxPrivAddrContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTrxPrivAddr, v))
}

// TrxPrivPkeyEQ applies the EQ predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyNEQ applies the NEQ predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyIn applies the In predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldTrxPrivPkey, vs...))
}

// TrxPrivPkeyNotIn applies the NotIn predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldTrxPrivPkey, vs...))
}

// TrxPrivPkeyGT applies the GT predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyGTE applies the GTE predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyLT applies the LT predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyLTE applies the LTE predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyContains applies the Contains predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyHasPrefix applies the HasPrefix predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyHasSuffix applies the HasSuffix predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyIsNil applies the IsNil predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTrxPrivPkey))
}

// TrxPrivPkeyNotNil applies the NotNil predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTrxPrivPkey))
}

// TrxPrivPkeyEqualFold applies the EqualFold predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldTrxPrivPkey, v))
}

// TrxPrivPkeyContainsFold applies the ContainsFold predicate on the "trx_priv_pkey" field.
func TrxPrivPkeyContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldTrxPrivPkey, v))
}

// AesTypeEQ applies the EQ predicate on the "aes_type" field.
func AesTypeEQ(v int8) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAesType, v))
}

// AesTypeNEQ applies the NEQ predicate on the "aes_type" field.
func AesTypeNEQ(v int8) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAesType, v))
}

// AesTypeIn applies the In predicate on the "aes_type" field.
func AesTypeIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldIn(FieldAesType, vs...))
}

// AesTypeNotIn applies the NotIn predicate on the "aes_type" field.
func AesTypeNotIn(vs ...int8) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAesType, vs...))
}

// AesTypeGT applies the GT predicate on the "aes_type" field.
func AesTypeGT(v int8) predicate.User {
	return predicate.User(sql.FieldGT(FieldAesType, v))
}

// AesTypeGTE applies the GTE predicate on the "aes_type" field.
func AesTypeGTE(v int8) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAesType, v))
}

// AesTypeLT applies the LT predicate on the "aes_type" field.
func AesTypeLT(v int8) predicate.User {
	return predicate.User(sql.FieldLT(FieldAesType, v))
}

// AesTypeLTE applies the LTE predicate on the "aes_type" field.
func AesTypeLTE(v int8) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAesType, v))
}

// AesTypeIsNil applies the IsNil predicate on the "aes_type" field.
func AesTypeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAesType))
}

// AesTypeNotNil applies the NotNil predicate on the "aes_type" field.
func AesTypeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAesType))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
