// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"core-chain/ent/gen/predicate"
	"core-chain/ent/gen/user"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shopspring/decimal"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser = "User"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uint
	words                  *string
	network                *string
	address                *string
	private_key            *string
	balance                *decimal.Decimal
	balance_update_time    *int
	addbalance_update_time *int
	token_info             *map[string]interface{}
	create_time            *int
	addcreate_time         *int
	create_date            *time.Time
	is_transfer            *int8
	addis_transfer         *int8
	total_token_value      *decimal.Decimal
	trx_mode               *user.TrxMode
	trx_addr_type          *user.TrxAddrType
	trx_priv_addr          *string
	trx_priv_pkey          *string
	aes_type               *int8
	addaes_type            *int8
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uint) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uint) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uint, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uint, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWords sets the "words" field.
func (m *UserMutation) SetWords(s string) {
	m.words = &s
}

// Words returns the value of the "words" field in the mutation.
func (m *UserMutation) Words() (r string, exists bool) {
	v := m.words
	if v == nil {
		return
	}
	return *v, true
}

// OldWords returns the old "words" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWords(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWords is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWords requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWords: %w", err)
	}
	return oldValue.Words, nil
}

// ClearWords clears the value of the "words" field.
func (m *UserMutation) ClearWords() {
	m.words = nil
	m.clearedFields[user.FieldWords] = struct{}{}
}

// WordsCleared returns if the "words" field was cleared in this mutation.
func (m *UserMutation) WordsCleared() bool {
	_, ok := m.clearedFields[user.FieldWords]
	return ok
}

// ResetWords resets all changes to the "words" field.
func (m *UserMutation) ResetWords() {
	m.words = nil
	delete(m.clearedFields, user.FieldWords)
}

// SetNetwork sets the "network" field.
func (m *UserMutation) SetNetwork(s string) {
	m.network = &s
}

// Network returns the value of the "network" field in the mutation.
func (m *UserMutation) Network() (r string, exists bool) {
	v := m.network
	if v == nil {
		return
	}
	return *v, true
}

// OldNetwork returns the old "network" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNetwork(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetwork is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetwork requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetwork: %w", err)
	}
	return oldValue.Network, nil
}

// ClearNetwork clears the value of the "network" field.
func (m *UserMutation) ClearNetwork() {
	m.network = nil
	m.clearedFields[user.FieldNetwork] = struct{}{}
}

// NetworkCleared returns if the "network" field was cleared in this mutation.
func (m *UserMutation) NetworkCleared() bool {
	_, ok := m.clearedFields[user.FieldNetwork]
	return ok
}

// ResetNetwork resets all changes to the "network" field.
func (m *UserMutation) ResetNetwork() {
	m.network = nil
	delete(m.clearedFields, user.FieldNetwork)
}

// SetAddress sets the "address" field.
func (m *UserMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *UserMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ClearAddress clears the value of the "address" field.
func (m *UserMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[user.FieldAddress] = struct{}{}
}

// AddressCleared returns if the "address" field was cleared in this mutation.
func (m *UserMutation) AddressCleared() bool {
	_, ok := m.clearedFields[user.FieldAddress]
	return ok
}

// ResetAddress resets all changes to the "address" field.
func (m *UserMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, user.FieldAddress)
}

// SetPrivateKey sets the "private_key" field.
func (m *UserMutation) SetPrivateKey(s string) {
	m.private_key = &s
}

// PrivateKey returns the value of the "private_key" field in the mutation.
func (m *UserMutation) PrivateKey() (r string, exists bool) {
	v := m.private_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPrivateKey returns the old "private_key" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPrivateKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrivateKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrivateKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrivateKey: %w", err)
	}
	return oldValue.PrivateKey, nil
}

// ClearPrivateKey clears the value of the "private_key" field.
func (m *UserMutation) ClearPrivateKey() {
	m.private_key = nil
	m.clearedFields[user.FieldPrivateKey] = struct{}{}
}

// PrivateKeyCleared returns if the "private_key" field was cleared in this mutation.
func (m *UserMutation) PrivateKeyCleared() bool {
	_, ok := m.clearedFields[user.FieldPrivateKey]
	return ok
}

// ResetPrivateKey resets all changes to the "private_key" field.
func (m *UserMutation) ResetPrivateKey() {
	m.private_key = nil
	delete(m.clearedFields, user.FieldPrivateKey)
}

// SetBalance sets the "balance" field.
func (m *UserMutation) SetBalance(d decimal.Decimal) {
	m.balance = &d
}

// Balance returns the value of the "balance" field in the mutation.
func (m *UserMutation) Balance() (r decimal.Decimal, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBalance(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// ResetBalance resets all changes to the "balance" field.
func (m *UserMutation) ResetBalance() {
	m.balance = nil
}

// SetBalanceUpdateTime sets the "balance_update_time" field.
func (m *UserMutation) SetBalanceUpdateTime(i int) {
	m.balance_update_time = &i
	m.addbalance_update_time = nil
}

// BalanceUpdateTime returns the value of the "balance_update_time" field in the mutation.
func (m *UserMutation) BalanceUpdateTime() (r int, exists bool) {
	v := m.balance_update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldBalanceUpdateTime returns the old "balance_update_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBalanceUpdateTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalanceUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalanceUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalanceUpdateTime: %w", err)
	}
	return oldValue.BalanceUpdateTime, nil
}

// AddBalanceUpdateTime adds i to the "balance_update_time" field.
func (m *UserMutation) AddBalanceUpdateTime(i int) {
	if m.addbalance_update_time != nil {
		*m.addbalance_update_time += i
	} else {
		m.addbalance_update_time = &i
	}
}

// AddedBalanceUpdateTime returns the value that was added to the "balance_update_time" field in this mutation.
func (m *UserMutation) AddedBalanceUpdateTime() (r int, exists bool) {
	v := m.addbalance_update_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearBalanceUpdateTime clears the value of the "balance_update_time" field.
func (m *UserMutation) ClearBalanceUpdateTime() {
	m.balance_update_time = nil
	m.addbalance_update_time = nil
	m.clearedFields[user.FieldBalanceUpdateTime] = struct{}{}
}

// BalanceUpdateTimeCleared returns if the "balance_update_time" field was cleared in this mutation.
func (m *UserMutation) BalanceUpdateTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldBalanceUpdateTime]
	return ok
}

// ResetBalanceUpdateTime resets all changes to the "balance_update_time" field.
func (m *UserMutation) ResetBalanceUpdateTime() {
	m.balance_update_time = nil
	m.addbalance_update_time = nil
	delete(m.clearedFields, user.FieldBalanceUpdateTime)
}

// SetTokenInfo sets the "token_info" field.
func (m *UserMutation) SetTokenInfo(value map[string]interface{}) {
	m.token_info = &value
}

// TokenInfo returns the value of the "token_info" field in the mutation.
func (m *UserMutation) TokenInfo() (r map[string]interface{}, exists bool) {
	v := m.token_info
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenInfo returns the old "token_info" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTokenInfo(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenInfo: %w", err)
	}
	return oldValue.TokenInfo, nil
}

// ClearTokenInfo clears the value of the "token_info" field.
func (m *UserMutation) ClearTokenInfo() {
	m.token_info = nil
	m.clearedFields[user.FieldTokenInfo] = struct{}{}
}

// TokenInfoCleared returns if the "token_info" field was cleared in this mutation.
func (m *UserMutation) TokenInfoCleared() bool {
	_, ok := m.clearedFields[user.FieldTokenInfo]
	return ok
}

// ResetTokenInfo resets all changes to the "token_info" field.
func (m *UserMutation) ResetTokenInfo() {
	m.token_info = nil
	delete(m.clearedFields, user.FieldTokenInfo)
}

// SetCreateTime sets the "create_time" field.
func (m *UserMutation) SetCreateTime(i int) {
	m.create_time = &i
	m.addcreate_time = nil
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *UserMutation) CreateTime() (r int, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateTime(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// AddCreateTime adds i to the "create_time" field.
func (m *UserMutation) AddCreateTime(i int) {
	if m.addcreate_time != nil {
		*m.addcreate_time += i
	} else {
		m.addcreate_time = &i
	}
}

// AddedCreateTime returns the value that was added to the "create_time" field in this mutation.
func (m *UserMutation) AddedCreateTime() (r int, exists bool) {
	v := m.addcreate_time
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *UserMutation) ClearCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
	m.clearedFields[user.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *UserMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *UserMutation) ResetCreateTime() {
	m.create_time = nil
	m.addcreate_time = nil
	delete(m.clearedFields, user.FieldCreateTime)
}

// SetCreateDate sets the "create_date" field.
func (m *UserMutation) SetCreateDate(t time.Time) {
	m.create_date = &t
}

// CreateDate returns the value of the "create_date" field in the mutation.
func (m *UserMutation) CreateDate() (r time.Time, exists bool) {
	v := m.create_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "create_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ClearCreateDate clears the value of the "create_date" field.
func (m *UserMutation) ClearCreateDate() {
	m.create_date = nil
	m.clearedFields[user.FieldCreateDate] = struct{}{}
}

// CreateDateCleared returns if the "create_date" field was cleared in this mutation.
func (m *UserMutation) CreateDateCleared() bool {
	_, ok := m.clearedFields[user.FieldCreateDate]
	return ok
}

// ResetCreateDate resets all changes to the "create_date" field.
func (m *UserMutation) ResetCreateDate() {
	m.create_date = nil
	delete(m.clearedFields, user.FieldCreateDate)
}

// SetIsTransfer sets the "is_transfer" field.
func (m *UserMutation) SetIsTransfer(i int8) {
	m.is_transfer = &i
	m.addis_transfer = nil
}

// IsTransfer returns the value of the "is_transfer" field in the mutation.
func (m *UserMutation) IsTransfer() (r int8, exists bool) {
	v := m.is_transfer
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTransfer returns the old "is_transfer" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsTransfer(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTransfer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTransfer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTransfer: %w", err)
	}
	return oldValue.IsTransfer, nil
}

// AddIsTransfer adds i to the "is_transfer" field.
func (m *UserMutation) AddIsTransfer(i int8) {
	if m.addis_transfer != nil {
		*m.addis_transfer += i
	} else {
		m.addis_transfer = &i
	}
}

// AddedIsTransfer returns the value that was added to the "is_transfer" field in this mutation.
func (m *UserMutation) AddedIsTransfer() (r int8, exists bool) {
	v := m.addis_transfer
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsTransfer clears the value of the "is_transfer" field.
func (m *UserMutation) ClearIsTransfer() {
	m.is_transfer = nil
	m.addis_transfer = nil
	m.clearedFields[user.FieldIsTransfer] = struct{}{}
}

// IsTransferCleared returns if the "is_transfer" field was cleared in this mutation.
func (m *UserMutation) IsTransferCleared() bool {
	_, ok := m.clearedFields[user.FieldIsTransfer]
	return ok
}

// ResetIsTransfer resets all changes to the "is_transfer" field.
func (m *UserMutation) ResetIsTransfer() {
	m.is_transfer = nil
	m.addis_transfer = nil
	delete(m.clearedFields, user.FieldIsTransfer)
}

// SetTotalTokenValue sets the "total_token_value" field.
func (m *UserMutation) SetTotalTokenValue(d decimal.Decimal) {
	m.total_token_value = &d
}

// TotalTokenValue returns the value of the "total_token_value" field in the mutation.
func (m *UserMutation) TotalTokenValue() (r decimal.Decimal, exists bool) {
	v := m.total_token_value
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalTokenValue returns the old "total_token_value" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTotalTokenValue(ctx context.Context) (v decimal.Decimal, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalTokenValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalTokenValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalTokenValue: %w", err)
	}
	return oldValue.TotalTokenValue, nil
}

// ResetTotalTokenValue resets all changes to the "total_token_value" field.
func (m *UserMutation) ResetTotalTokenValue() {
	m.total_token_value = nil
}

// SetTrxMode sets the "trx_mode" field.
func (m *UserMutation) SetTrxMode(um user.TrxMode) {
	m.trx_mode = &um
}

// TrxMode returns the value of the "trx_mode" field in the mutation.
func (m *UserMutation) TrxMode() (r user.TrxMode, exists bool) {
	v := m.trx_mode
	if v == nil {
		return
	}
	return *v, true
}

// OldTrxMode returns the old "trx_mode" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTrxMode(ctx context.Context) (v user.TrxMode, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrxMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrxMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrxMode: %w", err)
	}
	return oldValue.TrxMode, nil
}

// ClearTrxMode clears the value of the "trx_mode" field.
func (m *UserMutation) ClearTrxMode() {
	m.trx_mode = nil
	m.clearedFields[user.FieldTrxMode] = struct{}{}
}

// TrxModeCleared returns if the "trx_mode" field was cleared in this mutation.
func (m *UserMutation) TrxModeCleared() bool {
	_, ok := m.clearedFields[user.FieldTrxMode]
	return ok
}

// ResetTrxMode resets all changes to the "trx_mode" field.
func (m *UserMutation) ResetTrxMode() {
	m.trx_mode = nil
	delete(m.clearedFields, user.FieldTrxMode)
}

// SetTrxAddrType sets the "trx_addr_type" field.
func (m *UserMutation) SetTrxAddrType(uat user.TrxAddrType) {
	m.trx_addr_type = &uat
}

// TrxAddrType returns the value of the "trx_addr_type" field in the mutation.
func (m *UserMutation) TrxAddrType() (r user.TrxAddrType, exists bool) {
	v := m.trx_addr_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTrxAddrType returns the old "trx_addr_type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTrxAddrType(ctx context.Context) (v user.TrxAddrType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrxAddrType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrxAddrType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrxAddrType: %w", err)
	}
	return oldValue.TrxAddrType, nil
}

// ClearTrxAddrType clears the value of the "trx_addr_type" field.
func (m *UserMutation) ClearTrxAddrType() {
	m.trx_addr_type = nil
	m.clearedFields[user.FieldTrxAddrType] = struct{}{}
}

// TrxAddrTypeCleared returns if the "trx_addr_type" field was cleared in this mutation.
func (m *UserMutation) TrxAddrTypeCleared() bool {
	_, ok := m.clearedFields[user.FieldTrxAddrType]
	return ok
}

// ResetTrxAddrType resets all changes to the "trx_addr_type" field.
func (m *UserMutation) ResetTrxAddrType() {
	m.trx_addr_type = nil
	delete(m.clearedFields, user.FieldTrxAddrType)
}

// SetTrxPrivAddr sets the "trx_priv_addr" field.
func (m *UserMutation) SetTrxPrivAddr(s string) {
	m.trx_priv_addr = &s
}

// TrxPrivAddr returns the value of the "trx_priv_addr" field in the mutation.
func (m *UserMutation) TrxPrivAddr() (r string, exists bool) {
	v := m.trx_priv_addr
	if v == nil {
		return
	}
	return *v, true
}

// OldTrxPrivAddr returns the old "trx_priv_addr" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTrxPrivAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrxPrivAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrxPrivAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrxPrivAddr: %w", err)
	}
	return oldValue.TrxPrivAddr, nil
}

// ClearTrxPrivAddr clears the value of the "trx_priv_addr" field.
func (m *UserMutation) ClearTrxPrivAddr() {
	m.trx_priv_addr = nil
	m.clearedFields[user.FieldTrxPrivAddr] = struct{}{}
}

// TrxPrivAddrCleared returns if the "trx_priv_addr" field was cleared in this mutation.
func (m *UserMutation) TrxPrivAddrCleared() bool {
	_, ok := m.clearedFields[user.FieldTrxPrivAddr]
	return ok
}

// ResetTrxPrivAddr resets all changes to the "trx_priv_addr" field.
func (m *UserMutation) ResetTrxPrivAddr() {
	m.trx_priv_addr = nil
	delete(m.clearedFields, user.FieldTrxPrivAddr)
}

// SetTrxPrivPkey sets the "trx_priv_pkey" field.
func (m *UserMutation) SetTrxPrivPkey(s string) {
	m.trx_priv_pkey = &s
}

// TrxPrivPkey returns the value of the "trx_priv_pkey" field in the mutation.
func (m *UserMutation) TrxPrivPkey() (r string, exists bool) {
	v := m.trx_priv_pkey
	if v == nil {
		return
	}
	return *v, true
}

// OldTrxPrivPkey returns the old "trx_priv_pkey" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTrxPrivPkey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTrxPrivPkey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTrxPrivPkey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrxPrivPkey: %w", err)
	}
	return oldValue.TrxPrivPkey, nil
}

// ClearTrxPrivPkey clears the value of the "trx_priv_pkey" field.
func (m *UserMutation) ClearTrxPrivPkey() {
	m.trx_priv_pkey = nil
	m.clearedFields[user.FieldTrxPrivPkey] = struct{}{}
}

// TrxPrivPkeyCleared returns if the "trx_priv_pkey" field was cleared in this mutation.
func (m *UserMutation) TrxPrivPkeyCleared() bool {
	_, ok := m.clearedFields[user.FieldTrxPrivPkey]
	return ok
}

// ResetTrxPrivPkey resets all changes to the "trx_priv_pkey" field.
func (m *UserMutation) ResetTrxPrivPkey() {
	m.trx_priv_pkey = nil
	delete(m.clearedFields, user.FieldTrxPrivPkey)
}

// SetAesType sets the "aes_type" field.
func (m *UserMutation) SetAesType(i int8) {
	m.aes_type = &i
	m.addaes_type = nil
}

// AesType returns the value of the "aes_type" field in the mutation.
func (m *UserMutation) AesType() (r int8, exists bool) {
	v := m.aes_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAesType returns the old "aes_type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAesType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAesType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAesType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAesType: %w", err)
	}
	return oldValue.AesType, nil
}

// AddAesType adds i to the "aes_type" field.
func (m *UserMutation) AddAesType(i int8) {
	if m.addaes_type != nil {
		*m.addaes_type += i
	} else {
		m.addaes_type = &i
	}
}

// AddedAesType returns the value that was added to the "aes_type" field in this mutation.
func (m *UserMutation) AddedAesType() (r int8, exists bool) {
	v := m.addaes_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearAesType clears the value of the "aes_type" field.
func (m *UserMutation) ClearAesType() {
	m.aes_type = nil
	m.addaes_type = nil
	m.clearedFields[user.FieldAesType] = struct{}{}
}

// AesTypeCleared returns if the "aes_type" field was cleared in this mutation.
func (m *UserMutation) AesTypeCleared() bool {
	_, ok := m.clearedFields[user.FieldAesType]
	return ok
}

// ResetAesType resets all changes to the "aes_type" field.
func (m *UserMutation) ResetAesType() {
	m.aes_type = nil
	m.addaes_type = nil
	delete(m.clearedFields, user.FieldAesType)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.words != nil {
		fields = append(fields, user.FieldWords)
	}
	if m.network != nil {
		fields = append(fields, user.FieldNetwork)
	}
	if m.address != nil {
		fields = append(fields, user.FieldAddress)
	}
	if m.private_key != nil {
		fields = append(fields, user.FieldPrivateKey)
	}
	if m.balance != nil {
		fields = append(fields, user.FieldBalance)
	}
	if m.balance_update_time != nil {
		fields = append(fields, user.FieldBalanceUpdateTime)
	}
	if m.token_info != nil {
		fields = append(fields, user.FieldTokenInfo)
	}
	if m.create_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.create_date != nil {
		fields = append(fields, user.FieldCreateDate)
	}
	if m.is_transfer != nil {
		fields = append(fields, user.FieldIsTransfer)
	}
	if m.total_token_value != nil {
		fields = append(fields, user.FieldTotalTokenValue)
	}
	if m.trx_mode != nil {
		fields = append(fields, user.FieldTrxMode)
	}
	if m.trx_addr_type != nil {
		fields = append(fields, user.FieldTrxAddrType)
	}
	if m.trx_priv_addr != nil {
		fields = append(fields, user.FieldTrxPrivAddr)
	}
	if m.trx_priv_pkey != nil {
		fields = append(fields, user.FieldTrxPrivPkey)
	}
	if m.aes_type != nil {
		fields = append(fields, user.FieldAesType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldWords:
		return m.Words()
	case user.FieldNetwork:
		return m.Network()
	case user.FieldAddress:
		return m.Address()
	case user.FieldPrivateKey:
		return m.PrivateKey()
	case user.FieldBalance:
		return m.Balance()
	case user.FieldBalanceUpdateTime:
		return m.BalanceUpdateTime()
	case user.FieldTokenInfo:
		return m.TokenInfo()
	case user.FieldCreateTime:
		return m.CreateTime()
	case user.FieldCreateDate:
		return m.CreateDate()
	case user.FieldIsTransfer:
		return m.IsTransfer()
	case user.FieldTotalTokenValue:
		return m.TotalTokenValue()
	case user.FieldTrxMode:
		return m.TrxMode()
	case user.FieldTrxAddrType:
		return m.TrxAddrType()
	case user.FieldTrxPrivAddr:
		return m.TrxPrivAddr()
	case user.FieldTrxPrivPkey:
		return m.TrxPrivPkey()
	case user.FieldAesType:
		return m.AesType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldWords:
		return m.OldWords(ctx)
	case user.FieldNetwork:
		return m.OldNetwork(ctx)
	case user.FieldAddress:
		return m.OldAddress(ctx)
	case user.FieldPrivateKey:
		return m.OldPrivateKey(ctx)
	case user.FieldBalance:
		return m.OldBalance(ctx)
	case user.FieldBalanceUpdateTime:
		return m.OldBalanceUpdateTime(ctx)
	case user.FieldTokenInfo:
		return m.OldTokenInfo(ctx)
	case user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case user.FieldCreateDate:
		return m.OldCreateDate(ctx)
	case user.FieldIsTransfer:
		return m.OldIsTransfer(ctx)
	case user.FieldTotalTokenValue:
		return m.OldTotalTokenValue(ctx)
	case user.FieldTrxMode:
		return m.OldTrxMode(ctx)
	case user.FieldTrxAddrType:
		return m.OldTrxAddrType(ctx)
	case user.FieldTrxPrivAddr:
		return m.OldTrxPrivAddr(ctx)
	case user.FieldTrxPrivPkey:
		return m.OldTrxPrivPkey(ctx)
	case user.FieldAesType:
		return m.OldAesType(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldWords:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWords(v)
		return nil
	case user.FieldNetwork:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetwork(v)
		return nil
	case user.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case user.FieldPrivateKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrivateKey(v)
		return nil
	case user.FieldBalance:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case user.FieldBalanceUpdateTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalanceUpdateTime(v)
		return nil
	case user.FieldTokenInfo:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenInfo(v)
		return nil
	case user.FieldCreateTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case user.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	case user.FieldIsTransfer:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTransfer(v)
		return nil
	case user.FieldTotalTokenValue:
		v, ok := value.(decimal.Decimal)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalTokenValue(v)
		return nil
	case user.FieldTrxMode:
		v, ok := value.(user.TrxMode)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrxMode(v)
		return nil
	case user.FieldTrxAddrType:
		v, ok := value.(user.TrxAddrType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrxAddrType(v)
		return nil
	case user.FieldTrxPrivAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrxPrivAddr(v)
		return nil
	case user.FieldTrxPrivPkey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrxPrivPkey(v)
		return nil
	case user.FieldAesType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAesType(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addbalance_update_time != nil {
		fields = append(fields, user.FieldBalanceUpdateTime)
	}
	if m.addcreate_time != nil {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.addis_transfer != nil {
		fields = append(fields, user.FieldIsTransfer)
	}
	if m.addaes_type != nil {
		fields = append(fields, user.FieldAesType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldBalanceUpdateTime:
		return m.AddedBalanceUpdateTime()
	case user.FieldCreateTime:
		return m.AddedCreateTime()
	case user.FieldIsTransfer:
		return m.AddedIsTransfer()
	case user.FieldAesType:
		return m.AddedAesType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldBalanceUpdateTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalanceUpdateTime(v)
		return nil
	case user.FieldCreateTime:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateTime(v)
		return nil
	case user.FieldIsTransfer:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIsTransfer(v)
		return nil
	case user.FieldAesType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAesType(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldWords) {
		fields = append(fields, user.FieldWords)
	}
	if m.FieldCleared(user.FieldNetwork) {
		fields = append(fields, user.FieldNetwork)
	}
	if m.FieldCleared(user.FieldAddress) {
		fields = append(fields, user.FieldAddress)
	}
	if m.FieldCleared(user.FieldPrivateKey) {
		fields = append(fields, user.FieldPrivateKey)
	}
	if m.FieldCleared(user.FieldBalanceUpdateTime) {
		fields = append(fields, user.FieldBalanceUpdateTime)
	}
	if m.FieldCleared(user.FieldTokenInfo) {
		fields = append(fields, user.FieldTokenInfo)
	}
	if m.FieldCleared(user.FieldCreateTime) {
		fields = append(fields, user.FieldCreateTime)
	}
	if m.FieldCleared(user.FieldCreateDate) {
		fields = append(fields, user.FieldCreateDate)
	}
	if m.FieldCleared(user.FieldIsTransfer) {
		fields = append(fields, user.FieldIsTransfer)
	}
	if m.FieldCleared(user.FieldTrxMode) {
		fields = append(fields, user.FieldTrxMode)
	}
	if m.FieldCleared(user.FieldTrxAddrType) {
		fields = append(fields, user.FieldTrxAddrType)
	}
	if m.FieldCleared(user.FieldTrxPrivAddr) {
		fields = append(fields, user.FieldTrxPrivAddr)
	}
	if m.FieldCleared(user.FieldTrxPrivPkey) {
		fields = append(fields, user.FieldTrxPrivPkey)
	}
	if m.FieldCleared(user.FieldAesType) {
		fields = append(fields, user.FieldAesType)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldWords:
		m.ClearWords()
		return nil
	case user.FieldNetwork:
		m.ClearNetwork()
		return nil
	case user.FieldAddress:
		m.ClearAddress()
		return nil
	case user.FieldPrivateKey:
		m.ClearPrivateKey()
		return nil
	case user.FieldBalanceUpdateTime:
		m.ClearBalanceUpdateTime()
		return nil
	case user.FieldTokenInfo:
		m.ClearTokenInfo()
		return nil
	case user.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case user.FieldCreateDate:
		m.ClearCreateDate()
		return nil
	case user.FieldIsTransfer:
		m.ClearIsTransfer()
		return nil
	case user.FieldTrxMode:
		m.ClearTrxMode()
		return nil
	case user.FieldTrxAddrType:
		m.ClearTrxAddrType()
		return nil
	case user.FieldTrxPrivAddr:
		m.ClearTrxPrivAddr()
		return nil
	case user.FieldTrxPrivPkey:
		m.ClearTrxPrivPkey()
		return nil
	case user.FieldAesType:
		m.ClearAesType()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldWords:
		m.ResetWords()
		return nil
	case user.FieldNetwork:
		m.ResetNetwork()
		return nil
	case user.FieldAddress:
		m.ResetAddress()
		return nil
	case user.FieldPrivateKey:
		m.ResetPrivateKey()
		return nil
	case user.FieldBalance:
		m.ResetBalance()
		return nil
	case user.FieldBalanceUpdateTime:
		m.ResetBalanceUpdateTime()
		return nil
	case user.FieldTokenInfo:
		m.ResetTokenInfo()
		return nil
	case user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case user.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	case user.FieldIsTransfer:
		m.ResetIsTransfer()
		return nil
	case user.FieldTotalTokenValue:
		m.ResetTotalTokenValue()
		return nil
	case user.FieldTrxMode:
		m.ResetTrxMode()
		return nil
	case user.FieldTrxAddrType:
		m.ResetTrxAddrType()
		return nil
	case user.FieldTrxPrivAddr:
		m.ResetTrxPrivAddr()
		return nil
	case user.FieldTrxPrivPkey:
		m.ResetTrxPrivPkey()
		return nil
	case user.FieldAesType:
		m.ResetAesType()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
